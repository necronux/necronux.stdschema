// ==-----------------------------------------------------------== //
// SPDX-FileCopyrightText: Â© 2025 Nayan Patil <nayantsg@proton.me>
//
// SPDX-License-Identifier: Apache-2.0
// ==-----------------------------------------------------------== //

@ModuleInfo { minPklVersion = "0.27.0" }
module ReleaseValidate

import "@internal/schemas/GitHubAction.pkl" as gha

import "@internal/gha/StepsCommon.pkl"
import "@internal/gha/UtilsCommon.pkl"

const function releaseTag() = new gha.Job {
  name = "Validate Release Tag"
  steps {
    StepsCommon.checkoutWithRef(0, "${{ inputs.release_tag }}")
    new {
      name = "Display release tag"
      run = """
      echo "Release tag: ${{ inputs.release_tag }}"
      TAG="${{ inputs.release_tag }}"
      VERSION="${TAG#*@}"
      echo "Release Version: $VERSION"
      echo "RELEASE_VERSION=$VERSION" >> "$GITHUB_ENV"
      """
      shell = "bash"
    }
    new {
      name = "Check that tag version and necronux.stdschema PklProject version are the same"
      run = """
      TAG_VERSION="${{ env.RELEASE_VERSION }}"
      PKL_PROJECT_VERSION=$(awk -F '"' '/version *=/ {print $2; exit}' PklProject)
      echo "Extracted necronux.stdschema PklProject version: '$PKL_PROJECT_VERSION'"
      if [ "$TAG_VERSION" != "$PKL_PROJECT_VERSION" ]; then
        echo "Error: Tag version ("$TAG_VERSION") does not match necronux.stdschema PklProject version ("$PKL_PROJECT_VERSION")"
        exit 1
      fi
      """
      shell = "bash"
    }
  }
} |> UtilsCommon.standardJobConfig(null, null)

const function releaseType() = new gha.Job {
  name = "Validate Release Type"
  steps {
    StepsCommon.checkoutWithRef(0, "${{ inputs.release_tag }}")
    new {
      name = "Display release type"
      run = """
      echo "Release type: ${{ inputs.release_type }}"
      """
      shell = "bash"
    }
    new {
      name = "Check if selected release type matches release tag"
      run = """
      TAG="${{ inputs.release_tag }}"
      release_tag="${TAG#*@}"
      release_type="${{ inputs.release_type }}"

      if [[ "$release_type" == "stable-release" ]]; then
        if [[ "$release_tag" =~ -[a-zA-Z0-9]+ ]]; then
          echo "Error: Stable release tags should not contain pre-release identifiers."
          exit 1
        fi
      elif [[ "$release_type" == "pre-release" ]]; then
        if [[ ! "$release_tag" =~ -[a-zA-Z0-9]+ ]]; then
          echo "Error: Pre-release tags must contain a pre-release identifier."
          exit 1
        fi
      else
        echo "Error: Invalid release type."
        exit 1
      fi

      echo "Release type and tag format are correctly matched."
      """
      shell = "bash"
    }
  }
} |> UtilsCommon.standardJobConfig(null, null)
